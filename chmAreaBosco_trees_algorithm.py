# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CHMtoTrees
                                 A QGIS plugin
 Converts a CHM to a vector layer with forest polygons according to various definitions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-27
        copyright            : (C) 2023 by Francesco Pirotti - CIRGEO/TESAF University of Padova
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti - CIRGEO/TESAF University of Padova'
__date__ = '2023-05-27'
__copyright__ = '(C) 2023 by Francesco Pirotti - CIRGEO/TESAF University of Padova'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import math
import shutil

import numpy as np
#import tempfile
from qgis.PyQt.Qt import *
from qgis.PyQt.QtGui import *
from qgis.core import *
from qgis.utils import *
import inspect
import sys
from datetime import datetime
import os
#from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination)

dirname, filename = os.path.split(os.path.abspath(__file__))
sys.path.append(dirname)
import cv2 as cv
from osgeo import gdal
import processing
class CHMtoTreesAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    tmpdir = ''
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    TREEPOINTS = 'treepoints'
    TREECANOPY = 'treecanopy'
    KERNELOUTPUT = 'kerneloutput'
    THRESHOLD = 'similarityThreshold'
    THRESHOLDTREEHEIGHT = 'altezza_alberochioma_m'
    # PERC_COVER = 'PERC_COVER'
    # MIN_AREA = 'MIN_AREA'
    # MIN_LARGH = 'MIN_LARGH'
    # ALTEZZA_MIN_ALBERO = 'ALTEZZA_MIN_ALBERO'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input CHM')
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                self.THRESHOLDTREEHEIGHT,
                self.tr('Soglia altezza chioma (m)'),
                defaultValue=2.0
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.THRESHOLD,
                self.tr('Grado di similitudine (tra 0 ed 1)'),
                type=QgsProcessingParameterNumber.Double,
                maxValue=1.0,
                minValue=0.0,
                defaultValue=0.70
            )
        )
        self.addParameter(QgsProcessingParameterVectorDestination(self.TREECANOPY, 'Aree chiome',
                                                                  type=QgsProcessing.TypeVectorPolygon,
                                                                  createByDefault=True,
                                                                  optional=True,
                                                                  defaultValue=None))

        self.addParameter(QgsProcessingParameterFeatureSink(self.TREEPOINTS, 'Posizione alberi',
                                                            type=QgsProcessing.TypeVectorPoint,
                                                            optional=False,
                                                            createByDefault=True, defaultValue=None))
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.KERNELOUTPUT,
                self.tr('Raster Normalized Convoluted Kernel'),
                createByDefault=True,
                optional=True
            )
        )
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedback = QgsProcessingMultiStepFeedback(11, feedback)
        results = {}
        outputs = {}
        start = datetime.now()
        source = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        outputTreePoints = self.parameterAsVectorLayer(parameters, self.TREEPOINTS, context)
        threshold = parameters[self.THRESHOLD]
        thresholdHchioma = parameters[self.THRESHOLDTREEHEIGHT]
        areaPixel = source.rasterUnitsPerPixelX()*source.rasterUnitsPerPixelX()
        feedback.setProgressText("Preparo il raster in output")
        rasterfile = self.parameterAsFileOutput(parameters, self.KERNELOUTPUT, context)


        if source.bandCount() != 1:
            feedback.reportError('Il raster CHM deve avere solamente una banda - il file ' +
                                 str(source.source()) + ' ha ' + str(source.bandCount()) + ' bande!'
                                 )
            return {}

        feedback.setProgressText("Leggo il raster")
        fileformat = "GTiff"

        try:
            driver = gdal.GetDriverByName(fileformat)
        except:
            feedback.reportError('Non sono riuscito a leggere  o creare il raster CHM ' +
                                 gdal.GetLastErrorMsg() )

        try:
            ds = gdal.Open(str(source.source()))
        except:
            feedback.reportError('Non sono riuscito a leggere  il raster CHM ' +
                                 gdal.GetLastErrorMsg() )
            return {}

        img = np.array(ds.GetRasterBand(1).ReadAsArray())

        if img is None:
            feedback.reportError('Errore nella lettura con opencv del CHM ' + source.source())
            return {}

        #img.astype('f4')
        normalized_imageOriginal = cv.normalize(img, None, 0, 255, cv.NORM_MINMAX)
        img2 = img.astype('f4')
        img2[ img2 < thresholdHchioma ] = .0
        normalized_image = cv.normalize(img2, None, 0, 255, cv.NORM_MINMAX)
        feedback.setProgressText("Letto raster di dimensioni "+ str(img.shape))

        if feedback.isCanceled():
            return {}
        feedback.setProgressText("Dimensione immagine: " + ' x '.join(map(str, img.shape)))
        ksize = 5
        if ksize % 2 == 0:
            feedback.reportError("Kernel size must be odd / vuole un valore dispari la dimensione "
                                 "della finestra di template.")
            return {}
        template = np.zeros((ksize, ksize), dtype='f4')
        mid = int((ksize-1)/2)
        template[ 0,  ] = [ 0.4, 0.5, 0.6, 0.5, 0.4 ]
        template[ 1,  ] = [ 0.5, 0.7, 0.8, 0.7, 0.5 ]
        template[ 2,  ] = [ 0.6, 0.8, 1.0, 0.8, 0.6 ]
        template[ 3,  ] = [ 0.5, 0.7, 0.8, 0.7, 0.5 ]
        template[ 4,  ] = [ 0.4, 0.5, 0.6, 0.5, 0.4 ]
        template = (template * 100).astype('B')
        #template = (cv.GaussianBlur(template, (ksize-2, ksize-2), 0) * 255)

        methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
                   'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']
        res = cv.matchTemplate(normalized_image.astype('B'), template.astype('B'), cv.TM_CCOEFF_NORMED )
        #kernel = cv.getStructuringElement(cv.MORPH_ELLIPSE, (5, 5))

        if feedback.isCanceled():
            return {}

        dst = cv.copyMakeBorder(res, mid, mid, mid, mid,
                                cv.BORDER_CONSTANT, None, 0)

        # cv.imwrite("AAAAAtemplate.jpg", (dst * 255).astype('B'))

        feedback.setProgressText("Writing tree top probability raster")
        if feedback.isCanceled():
            return {}

        kernel = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        feedback.setProgressText("Dilation...")
        dilated = cv.dilate(dst, kernel)
        if feedback.isCanceled():
            return {}

        feedback.setProgressText("Masking...")
        mask = cv.compare(dst, dilated, cv.CMP_EQ)
        if feedback.isCanceled():
            return {}


        if rasterfile:
            try:
                dst_ds = driver.CreateCopy(rasterfile, ds, strict=1)
                dst_ds.GetRasterBand(1).WriteArray(dst)
                dst_ds = None
            except:
                feedback.reportError("Non sono riuscito a scrivere su file " +
                                         rasterfile )
                return {}

            out_rlayer = QgsRasterLayer(rasterfile, "Tree top probability map")
            mess, success = out_rlayer.loadNamedStyle(dirname+"/extra/styleCNNprob.qml")
            if success is False:
                feedback.reportError( mess + " - " + dirname+"/extra/styleCNNprob.qml")
            QgsProject.instance().addMapLayer(out_rlayer)

        ds = None
        feedback.setProgressText("Threshold " + str(threshold))
        loc = np.asarray( (img2 > thresholdHchioma)*(dst >= threshold)*mask ).nonzero()
        #loc = np.where(dst >= threshold)
        loct = loc + (img2[loc], dst[loc])
        outputTreePoints = self.create_points(loct, source.dataProvider(), feedback)
        if outputTreePoints is None:
            feedback.setProgressText("Interrotto dall'utente")
            return {}



        # Setup SimpleBlobDetector parameters.
        params = cv.SimpleBlobDetector_Params()

        # Change thresholds
        params.minThreshold = 5
        params.maxThreshold = 50

        # Filter by Area.
        # params.filterByArea = True
        # params.minArea = 1500
        # Filter by Circularity
        params.filterByCircularity = True
        params.minCircularity = 0.1
        # Filter by Convexity
        params.filterByConvexity = True
        params.minConvexity = 0.87
        # Filter by Inertia
        params.filterByInertia = True
        params.minInertiaRatio = 0.01

        detector = cv.SimpleBlobDetector_create(params)
        normalized_imageInv = (normalized_imageOriginal*-1)
        keypoints = detector.detect(normalized_imageInv.astype('B'))

        self._add_points_blob(keypoints, outputTreePoints, source.dataProvider(), feedback)
       # point_provider = outputTreePoints.dataProvider()


        QgsProject.instance().addMapLayer(outputTreePoints)
        if outputTreePoints is None:
            feedback.setProgressText("Interrotto dall'utente")
            return {}

        return results
    

    def create_points(self, points, sdp, feedback):
        """Create points for testing"""

        srcCRS = sdp.crs()
        point_layer = QgsVectorLayer('Point?crs=EPSG:4326', 'Tree top positions', 'memory')
        point_layer.setCrs(srcCRS)
        point_provider = point_layer.dataProvider()
        point_provider.addAttributes([QgsField('X', QVariant.Double)])
        point_provider.addAttributes([QgsField('Y', QVariant.Double)])
        point_provider.addAttributes([QgsField('Similarity', QVariant.Double)])
        point_provider.addAttributes([QgsField('TreeHeight', QVariant.Double)])
        point_provider.addAttributes([QgsField('Algo', QVariant.String)])
        #point_provider.addAttributes([QgsField('sizeX', QVariant.Double)])
        caps = point_provider.capabilities()
        if caps & QgsVectorDataProvider.AddFeatures:
            point_layer.startEditing()
            feedback.setProgressText("Salvo: " + str(len(points[0])) + " posizione alberi algoritmo cross correlation (CC).")
            cnt = 0

            every = int(len(points[0])/100)
            zz = zip(*points[::-1])

            for pt in zz:
                cnt += 1
                if every > 100:
                    if cnt % every == 0:
                        feedback.setProgress(int(cnt/len(points[0])*100))
                        if feedback.isCanceled():
                            return None
                    if cnt % (every*10) == 0:
                        feedback.setProgressText(str(round(cnt/len(points[0])*100)) + "% ....")

                feat = QgsFeature(point_layer.fields())
                x, y = self.local2src(pt[2], pt[3], sdp)
                feat.setAttributes([x, y, float(pt[0]), float(pt[1]), 'CC'])

                geom = QgsGeometry.fromPointXY(QgsPointXY(x, y))
                feat.setGeometry(geom)
                b = point_layer.addFeature(feat)

                if not b:
                    print("Error adding feature")
                    print(point_layer.lastError())
                    print(point_layer.isValid())
                    break
            commErr = point_layer.commitChanges()
            if not commErr:
                print("Error committing feature")
                print(point_layer.lastError())
                print(point_layer.commitErrors())

            print("------------tot features")
            print(point_layer.featureCount())

        else:
            print("Error")
            return {}

        return point_layer


    def _add_points_blob(self, keypoints, point_layer, sdp, feedback):
        """Create points for testing"""

        point_provider = point_layer.dataProvider()
        caps = point_provider.capabilities()
        if caps & QgsVectorDataProvider.AddFeatures:
            point_layer.startEditing()
            feedback.setProgressText("Salvo: " + str(len(keypoints)) + " posizione alberi algoritmo Blob (Bl).")
            cnt = 0

            ext = QgsRectangle(sdp.extent())
            every = int(len(keypoints)/100)
            #for pt in zz:
            for kp in keypoints:
                cnt += 1
                if every > 100:
                    if cnt % every == 0:
                        feedback.setProgress(int(cnt/len(keypoints)*100))
                        if feedback.isCanceled():
                            return None
                    if cnt % (every*10) == 0:
                        feedback.setProgressText(str(round(cnt/len(keypoints)*100)) + "% ....")

                feat = QgsFeature(point_layer.fields())
                xl = int(kp.pt[0])  # x-coordinate of the keypoint
                yl = int(kp.pt[1])  # y-coordinate of the keypoint
                size = int(kp.size)  # size of the keypoint
                response = kp.response  # response of the keypoint
                x, y = self.local2src(xl, yl, sdp)
                feat.setAttributes([x, y, float(size), float(response), 'Bl'])

                geom = QgsGeometry.fromPointXY(QgsPointXY(x, y))
                feat.setGeometry(geom)
                b = point_layer.addFeature(feat)

                if not b:
                    print("Error adding feature")
                    print(point_layer.lastError())
                    feedback.reportError(point_layer.lastError())
                    feedback.reportError(point_layer.isValid())
                    break
            commErr = point_layer.commitChanges()
            if not commErr:
                print("Error committing feature")
                print(point_layer.lastError())
                feedback.reportError(point_layer.lastError())
                print(point_layer.commitErrors())
                feedback.reportError(point_layer.commitErrors())

            print("------------tot features")
            print(point_layer.featureCount())

        else:
            print("Error")
            return {}

        return point_layer

    def local2src(self, x, y, dataProvider, verbose=False ):
        x1 = float(0)
        y1 = float(0)
        if isinstance(dataProvider, QgsRasterDataProvider):
            ext = QgsRectangle(dataProvider.extent())

            x1 = ext.xMinimum() + \
                 (float(x) * ((ext.xMaximum()-ext.xMinimum())/dataProvider.xSize())) + \
                 ((ext.xMaximum()-ext.xMinimum())/dataProvider.xSize())/2.0
            y1 = ext.yMaximum() - \
                 (float(y) * ((ext.yMaximum()-ext.yMinimum())/dataProvider.ySize())) - \
                 ((ext.yMaximum()-ext.yMinimum())/dataProvider.ySize())/2.0
        else:
            print("Error no data provider of raster type provided")
            return None


            if verbose:
                print( str(x) + ' - ' + str(x1)   )

        return x1, y1

    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'CHM => Single Tree Detection'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CHMtoTreesAlgorithm()
